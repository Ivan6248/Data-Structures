/**
 * @file quadtree.cpp
 * Quadtree class implementation.
 * @date Spring 2008
 */
 #include "quadtree.h"


Quadtree::QuadtreeNode::QuadtreeNode() //QuadtreeNode constructor
{
	nwChild = NULL;
    neChild = NULL;
    swChild = NULL;
    seChild = NULL;

}

Quadtree::QuadtreeNode::QuadtreeNode(const RGBAPixel &source)
{
	nwChild = NULL;
    neChild = NULL;
    swChild = NULL;
    seChild = NULL;
    element=source;
}

Quadtree::Quadtree() //Empty constructor
{
	root=NULL;
	resolution=0;
}

Quadtree::Quadtree(PNG const&source, int resolution) //Constructor
{
	root=NULL;
	buildTree(source, resolution);

}

Quadtree::Quadtree(Quadtree const &other) //Copy Constructor
{
	copy(other);
}

void Quadtree::copy(const Quadtree &other) //Copy function
{
	if(other.root!=NULL)
	{
		copy(other.root, root);
		resolution=other.resolution;
	}
	else{
		resolution =0;
		root=NULL;
	}
}

void Quadtree::copy(Quadtree::QuadtreeNode * orig, QuadtreeNode * & newCopy) //Copy helper function
{
	newCopy = new QuadtreeNode(orig->element);
	if(orig->nwChild!=NULL)
		copy(orig->nwChild,newCopy->nwChild);
	if(orig->neChild!=NULL)
		copy(orig->neChild,newCopy->neChild);
	if(orig->swChild!=NULL)
		copy(orig->swChild,newCopy->swChild);
	if(orig->seChild!=NULL)
		copy(orig->seChild,newCopy->seChild);
}

Quadtree::~Quadtree() //destructor
{
	clear(root);
}

void Quadtree::clear(QuadtreeNode * &subRoot)//destructor helper
{ 
	if(subRoot!=NULL)
	{
		clear(subRoot->nwChild);
		clear(subRoot->neChild);
		clear(subRoot->swChild);
		clear(subRoot->seChild);
		delete subRoot;
		subRoot=NULL;
	}
	resolution = 0;
}

Quadtree Quadtree::operator =(Quadtree const&other) //assignment operator
{
	if(this==&other)
		return *this;
	else
	{
		clear(root);
		copy(other);
		return *this;
	}
}

void Quadtree::buildTree(PNG const&source, int resolution) 
{
	clear(root);
	build(root, 0, 0, source, resolution);
}

void Quadtree::build(QuadtreeNode* subRoot, int xcoord, int ycoord, PNG const&source, int resolution) //buildTree helper function
{
	subRoot = new QuadtreeNode(); 
	if(resolution == 1)
	{
		subRoot->element = (*source(xcoord,ycoord));
		return;
	}

	//makes each child of the split up quadtree
	
	build(subRoot->nwChild, xcoord, ycoord, source, resolution/2);
	build(subRoot->neChild, xcoord+resolution/2, ycoord, source, resolution/2);
	build(subRoot->swChild, xcoord, ycoord+resolution/2, source, resolution/2);
	build(subRoot->seChild, xcoord+resolution/2, ycoord+resolution/2, source, resolution/2);

	//store the average of the pixels into the original pixel's element

	(subRoot->element).red=(((subRoot->nwChild->element).red) + ((subRoot->neChild->element).red) + ((subRoot->swChild->element).red) + ((subRoot->seChild->element).red))/4;
	(subRoot->element).green=(((subRoot->nwChild->element).green) + ((subRoot->neChild->element).green) + ((subRoot->swChild->element).green) + ((subRoot->seChild->element).green))/4;
	(subRoot->element).blue=(((subRoot->nwChild->element).blue) + ((subRoot->neChild->element).blue) + ((subRoot->swChild->element).blue) + ((subRoot->seChild->element).blue))/4;
}

RGBAPixel Quadtree::getPixel(int x, int y) const
{
	if(x>resolution || y>resolution)
	{
		return RGBAPixel();
	}
	return getPixel(x, y, root, resolution);
}

RGBAPixel Quadtree::getPixel(int x, int y, QuadtreeNode * curr, int resolution)const
{
	if(curr->nwChild != NULL)
	{
		if(x<resolution && y<resolution)
		{
			return getPixel(x, y, curr->nwChild, resolution/2);
		}
		if(x>=resolution && y<resolution/2)
		{
			return getPixel(x-resolution/2, y, curr->neChild, resolution/2);
		}
		if(x<resolution && y>=resolution/2)
		{
			return getPixel(x, y-resolution/2, curr->swChild, resolution/2);
		}
		if(x>=resolution && y>=resolution)
		{
			return getPixel(x-resolution/2, y-resolution/2, curr->seChild, resolution/2);
		}
	}
		return curr->element;


}

PNG Quadtree::decompress() const
{
	if(root==NULL)
	return PNG();
		else{
			PNG image (resolution, resolution);
			for(int i=0;i<resolution;i++)
			{
				for(int k=0;k<resolution;k++)
				{
					*image(i,k)=getPixel(i,k);
				}
			}
			return image;
		}
}
