#include "scene.h"
#include "image.h"
#include "rgbapixel.h"
#include "png.h"
#include<iostream>
using namespace::std;

Scene::Scene (int x)
{
	max = x;
	imageArr = new Image*[max];
	for (int i=0;i<max;i++){
		imageArr[i]=NULL;
	}
}

Scene::~Scene()
{
	delete [] imageArr;
}

Scene::Scene(const Scene & source)
{
	copy(source);
}

void Scene::copy(const Scene & source)
{
	int size=source.max;
	newArr= new Image*[size];
	for(int i=0;i<size;i++){
		if(other.imageArr[i]!=NULL){
			newArr[i]=(*other.imageArr[i]);
		}
		else{
			newArr[i]=NULL;
		}

	}
}

const Scene & Scene::operator= (const Scene & source)
{

}

void Scene::changemaxlayers(int newmax)
{
	newArr= new Image*[newmax];
	if(newmax>max){
	for (int i=0;i<newmax;i++){
	}
}
	if(max>=newmax)
}

void Scene::addpicture(const char* Filename, int index, int x, int y)
{
	if(index>max-1 || index<0){
		cout<<"index out of bounds<<"<<endl;
		return;
	}
	imageArr[index]=readFromFile(Filename);
}

void Scene::changelayer(int index, int newindex)
{
	if(newindex=index){
		return;
	}
	if(arr[newindex]!=NULL){
		delete arr[newindex];
		arr[newindex]=arr[index];
		arr[index]=NULL;
	}
	if(newindex>max-1 || newindex<0 || index>max-1 || index<0){
		cout<<"invalid index"<<endl;
	}


}

void Scene::translate(int index, int xcoord, int ycoord)
{

}

void Scene::deletepicture(int index)
{
	if(index>max-1||index<0||imageArr[index]=NULL){
		cout<<"invalid index"<<endl;
		return;
	}
	delete imageArr[index];
	imageArr[index]=NULL;
}

Image * Scene::getpicture(int index) const
{
	if (index>max-1 || index<0 || imageArr[index]=NULL){
		cout<<"invalid index"<<endl;
		return;
	}
	return imageArr[index];
}

Image Scene::drawscene() const
{

}


