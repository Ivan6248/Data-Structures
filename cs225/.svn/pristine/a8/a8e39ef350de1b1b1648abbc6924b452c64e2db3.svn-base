You will be implementing the following function:

```
std::vector<int> countDuplicate(std::vector<int> data, int k)
```

Given an unsorted vector that may contain duplicates and a number `k` which is
smaller than the size of the vector, write a function that returns a vector
containing the number of elements that are duplicated in sliding windows of
size `k`. The first window starts at index 0 and has length `k`, so it ends at
index `k-1`; the second window starts at 1 and ends at `k`; the third window
starts at 2 and ends at `1+k`. You should ignore partial windows (at the end of
the vector).

Examples:

- `k = 4`, `vec = <1,2,2,4,4,2,3,3>` should return `<1,2,2,1,1>`: 
    - In the first window (`<1,2,2,4>`), the number of duplicates is just 2.
    - In the second window (`<2,2,4,4>`), 2 and 4 are repeated.
    - In the third window (`<2,4,4,2>`), 2 and 4 are repeated (again).
    - Finally 4 and 3 are repeated in respective last two windows (`<4,4,2,3>` and `<4,2,3,3>`).

- `k = 4`, `vec = <1,2,3,1,4,5>` should return `<1,0,0>` (No number is repeated in last two windows.)
- `k = 6`, `vec = <1,2,2,1,3,2,1,3,4,5>` should return `<2,2,3,2,1>` (Three different numbers are repeated in the third window `<2,1,3,2,1,3>`.)
- `k = 3`, `vec = <1,2,3,4,5>` should return `<0,0,0>`
