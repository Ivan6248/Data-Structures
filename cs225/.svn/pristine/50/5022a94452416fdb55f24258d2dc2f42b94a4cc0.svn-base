/* Your code here! */
#include <algorithm>
#include <vector>
#include <queue>
#include <cstdlib>
#include <sys/time.h>
#include <time.h>
#include "maze.h"
#include "dsets.h"

SquareMaze::SquareMaze()
{
	isMaze = false;
	mazeWidth = 0;
	mazeHeight = 0;
}
void SquareMaze::makeMaze(int width, int height)
{
	if(isMaze)
	{
		mazeHeight = 0 ;
		mazeWidth = 0;
		size = 0;
		isMaze=false;
		downWalls.clear();
		rightWalls.clear();
		sets.remove();
	}
	if(!isMaze)
	{
		isMaze = true;
		mazeHeight = height;
		mazeWidth = width;
		size = mazeWidth*mazeHeight;

		sets.addelements(size);

		for(int i = 0; i<size;i++)
		{
			downWalls.push_back(true);
			rightWalls.push_back(true);
		}

		int count = 0 ;
		while(count != size-1)
		{
			int randX = rand() % mazeWidth; //a random x-coordinate in grid
			int randY = rand() % mazeHeight; // a random y-coordinate in grid
			int index = randY*width + randX; //index in the array
			//each vector is represented by one long array, so the index represents the place (x,y) in the coordinate


			if(downWalls[index]==true && randY<mazeHeight-1){
				if(sets.find(index)!=sets.find(index+mazeWidth))
				{
					downWalls[index]=false;
					count++;
					sets.setunion(sets.find(index),sets.find(index+mazeWidth));
				}
			}
			if(rightWalls[index]==true && randX<mazeWidth-1)
			{
				if(sets.find(index)!=sets.find(index+1))
				{
					rightWalls[index]=false;
					count++;
					sets.setunion(sets.find(index),sets.find(index+1));

				}	
			}

		}

	}
}
bool SquareMaze::canTravel(int x, int y, int dir) const
{
	if(dir==0)
	{
		if(x==mazeWidth-1)
			return false;
		else if(rightWalls[x+mazeWidth*y])
			return false;
		else return true;
	}
	if(dir==1)
	{
		if(y==mazeHeight-1)
			return false;
		else if(downWalls[x+mazeWidth*y])
			return false;
		else return true;
	}
	if(dir==2)
	{
		if(x==0)
			return false;
		else if(rightWalls[mazeWidth*y+x-1])
			return false;
		else return true;
	}
	if(dir==3)
	{
		if(y==0)
			return false;
		else if(downWalls[mazeWidth*(y-1)+x])
			return false;
		else return true;
	}
	return false;
}
void SquareMaze::setWall(int x, int y, int dir, bool exists)
{

}
vector<int> SquareMaze::solveMaze()
{
	vector<int> x;
	return x;
}
PNG* SquareMaze::drawMaze() const
{	
	PNG* finalPNG = new PNG(mazeWidth*10+1, mazeHeight*10+1); // make a new pixel the size of the height and width * 10 because each pixel is 10x10

	for(int i=0; i<size; i++)
    {
        if(rightWalls[i]==true) 
        {
            for(int j=0; j<=10; j++)
            {
                (*finalPNG)((i%mazeWidth+1)*10,(i/mazeWidth)*10+j)->red = 0;
                (*finalPNG)((i%mazeWidth+1)*10,(i/mazeWidth)*10+j)->green = 0;
                (*finalPNG)((i%mazeWidth+1)*10,(i/mazeWidth)*10+j)->blue = 0;
            }
        }
        if(downWalls[i]==true) 
        {
            for(int j=0; j<=10; j++)
            {
                (*finalPNG)((i%mazeWidth)*10+j, (i/mazeWidth+1)*10)->red = 0;
                (*finalPNG)((i%mazeWidth)*10+j, (i/mazeWidth+1)*10)->green = 0;
                (*finalPNG)((i%mazeWidth)*10+j, (i/mazeWidth+1)*10)->blue = 0;
            }
        }
    }

	for(size_t i=0; i<(*finalPNG).height(); i++)
	{
		(*finalPNG)(0,i)->red = 0;
		(*finalPNG)(0,i)->green = 0;
		(*finalPNG)(0,i)->blue = 0;
	}
	for(size_t i = 10; i<(*finalPNG).width(); i++)
	{
		(*finalPNG)(i,0)->red = 0;
		(*finalPNG)(i,0)->green = 0;
		(*finalPNG)(i,0)->blue = 0;
	}
	

    return finalPNG;

}
PNG* SquareMaze::drawMazeWithSolution()
{
	PNG* temp = new PNG();
	return temp;
}